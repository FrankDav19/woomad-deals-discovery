plugin:vite:react-swc] × the name `useRef` is defined multiple times
     ╭─[/home/runner/workspace/src/components/maps/LocationMap.tsx:2:1]
   1 │ 
   2 │ import { useEffect, useRef, useState } from 'react';
     ·                     ───┬──
     ·                        ╰── previous definition of `useRef` here
   3 │ import mapboxgl from 'mapbox-gl';
   4 │ import 'mapbox-gl/dist/mapbox-gl.css';
   5 │ import { Store } from '@/types/store';
   6 │ import { useQuery } from '@tanstack/react-query';
   7 │ import { supabase } from '@/integrations/supabase/client';
   8 │ import { Button } from "@/components/ui/button";
   9 │ import { toast } from "sonner";
  10 │ import { AlertCircle, MapPin } from "lucide-react";
  11 │ 
  12 │ interface LocationMapProps {
  13 │   userLocation: { lat: number; lng: number } | null;
  14 │   className?: string;
  15 │ }
  16 │ 
  17 │ // Validate and set Mapbox token
  18 │ const MAPBOX_TOKEN = 'pk.eyJ1IjoiYWdsejE0IiwiYSI6ImNtN24wMTV2cjByMncybHBycHAwMGQ3aG4ifQ.R5Qpb4QfKpXvuRLNt1yf-g';
  19 │ 
  20 │ const isValidMapboxToken = (token: string): boolean => {
  21 │   return token.startsWith('pk.') && token.length > 50;
  22 │ };
  23 │ 
  24 │ if (!isValidMapboxToken(MAPBOX_TOKEN)) {
  25 │   console.error('Invalid Mapbox token format');
  26 │ } else {
  27 │   mapboxgl.accessToken = MAPBOX_TOKEN;
  28 │ }
  29 │ 
  30 │ export const LocationMap = ({ userLocation, className = "" }: LocationMapProps) => {
  31 │   const mapContainer = useRef<HTMLDivElement>(null);
  32 │   const map = useRef<mapboxgl.Map | null>(null);
  33 │   const markersRef = useRef<mapboxgl.Marker[]>([]);
  34 │   const [mapReady, setMapReady] = useState(false);
  35 │   const [mapError, setMapError] = useState<string | null>(null);
  36 │ 
  37 │   const { data: malls } = useQuery({
  38 │     queryKey: ['shopping-malls-map'],
  39 │     queryFn: async () => {
  40 │       const { data, error } = await supabase
  41 │         .from('shopping_malls')
  42 │         .select('*, stores(*)');
  43 │       if (error) throw error;
  44 │       return data;
  45 │     }
  46 │   });
  47 │ 
  48 │   useEffect(() => {
  49 │     if (!mapContainer.current || map.current) return;
  50 │ 
  51 │     if (!isValidMapboxToken(MAPBOX_TOKEN)) {
  52 │       const error = 'Error: Invalid map configuration';
  53 │       console.error(error);
  54 │       setMapError(error);
  55 │       toast.error(error);
  56 │       return;
  57 │     }
  58 │ 
  59 │     try {
  60 │       const defaultCenter = [-99.1332, 19.4326]; // Mexico City
  61 │       const initialCenter = userLocation ? [userLocation.lng, userLocation.lat] : defaultCenter;
  62 │       const initialZoom = userLocation ? 12 : 5;
  63 │ 
  64 │       // Initialize map
  65 │       map.current = new mapboxgl.Map({
  66 │         container: mapContainer.current!,
  67 │         style: 'mapbox://styles/mapbox/streets-v12',
  68 │         center: initialCenter,
  69 │         zoom: initialZoom,
  70 │         attributionControl: false
  71 │       });
  72 │ 
  73 │       // Add navigation controls
  74 │       map.current.addControl(new mapboxgl.NavigationControl(), 'top-right');
  75 │ 
  76 │       // Add user location control
  77 │       map.current.addControl(new mapboxgl.GeolocateControl({
  78 │         positionOptions: {
  79 │           enableHighAccuracy: true
  80 │         },
  81 │         trackUserLocation: true,
  82 │         showUserHeading: true
  83 │       }));
  84 │ 
  85 │       // Add attribution control
  86 │       map.current.addControl(new mapboxgl.AttributionControl(), 'bottom-right');
  87 │ 
  88 │       // Wait for map to load before doing anything else
  89 │       map.current.on('load', () => {
  90 │         console.log('Map loaded successfully');
  91 │         setMapReady(true);
  92 │       });
  93 │ 
  94 │       // Handle any errors
  95 │       map.current.on('error', (e) => {
  96 │         console.error('Map error:', e);
  97 │         setMapError('Error loading map components');
  98 │         toast.error('Error loading map components');
  99 │       });
 100 │     } catch (error) {
 101 │       console.error('Error initializing map:', error);
 102 │       setMapError('Error initializing map interface');
 103 │       toast.error('Error initializing map interface');
 104 │     }
 105 │ 
 106 │     return () => {
 107 │       if (map.current) {
 108 │         map.current.remove();
 109 │         map.current = null;
 110 │         setMapReady(false);
 111 │       }
 112 │     };
 113 │   }, [userLocation]);
 114 │ 
 115 │   // Update markers when map is ready and malls data changes
 116 │   useEffect(() => {
 117 │     if (!mapReady || !map.current || !malls) return;
 118 │ 
 119 │     console.log('Adding markers for', malls.length, 'malls');
 120 │     
 121 │     // Clear existing markers
 122 │     markersRef.current.forEach(marker => marker.remove());
 123 │     markersRef.current = [];
 124 │ 
 125 │     malls.forEach(mall => {
 126 │       if (!mall.longitude || !mall.latitude) {
 127 │         console.warn('Mall missing coordinates:', mall.name);
 128 │         return;
 129 │       }
 130 │ 
 131 │       const storeCount = mall.stores?.length || 0;
 132 │       
 133 │       // Create custom marker element
 134 │       const el = document.createElement('div');
 135 │       el.className = 'relative';
 136 │       el.innerHTML = `
 137 │         <div class="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white font-bold shadow-lg cursor-pointer hover:bg-purple-700 transition-colors">
 138 │           ${storeCount}
 139 │         </div>
 140 │       `;
 141 │ 
 142 │       // Create popup with clickable link and rich details
 143 │       const popup = new mapboxgl.Popup({ 
 144 │         offset: 25, 
 145 │         maxWidth: '300px',
 146 │         className: 'mall-popup-container' // Custom class for styling
 147 │       })
 148 │         .setHTML(`
 149 │           <div class="p-3 border-b border-purple-100">
 150 │             <h3 class="font-bold text-gray-900 text-lg mb-1">${mall.name}</h3>
 151 │             <div class="flex items-start gap-2 mb-2">
 152 │               <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-500 mt-0.5 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>
 153 │               <p class="text-sm text-gray-600">${mall.address}</p>
 154 │             </div>
 155 │             <div class="flex items-center gap-2">
 156 │               <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-500 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="16" height="16" x="4" y="4" rx="2"/><path d="M9 9h.01M15 9h.01M9 15h.01M15 15h.01M9 9h.01"/></svg>
 157 │               <p class="text-sm text-purple-600 font-medium">${storeCount} tiendas</p>
 158 │             </div>
 159 │             ${mall.description ? `<p class="text-sm text-gray-500 mt-2 italic line-clamp-2">${mall.description}</p>` : ''}
 160 │           </div>
 161 │           <div class="p-3">
 162 │             <a href="/mall/${mall.id}" class="block w-full py-2 px-3 bg-purple-600 hover:bg-purple-700 text-white text-center rounded-md font-medium text-sm transition-colors">Ver perfil completo</a>
 163 │           </div>
 164 │         `);
 165 │ 
 166 │       // Add marker to map
 167 │       try {
 168 │         // Make the marker element clickable with improved interaction
 169 │         el.style.cursor = 'pointer';
 170 │         el.onclick = (e) => {
 171 │           // First show popup when clicking on marker
 172 │           marker.togglePopup();
 173 │           
 174 │           // Fly to the marker position with slight offset for popup visibility
 175 │           if (map.current) {
 176 │             // Get popup height to calculate proper offset
 177 │             const popupHeight = document.querySelector('.mapboxgl-popup-content')?.clientHeight || 200;
 178 │             
 179 │             // Center on marker with vertical offset to ensure popup is visible
 180 │             map.current.flyTo({
 181 │               center: [mall.longitude, mall.latitude],
 182 │               offset: [0, -popupHeight/2],
 183 │               zoom: Math.max(map.current.getZoom(), 13), // Ensure we're zoomed in enough
 184 │               duration: 800,
 185 │               essential: true
 186 │             });
 187 │           }
 188 │           
 189 │           // Prevent immediate navigation to allow users to read popup details
 190 │           e.stopPropagation();
 191 │           e.preventDefault();
 192 │         };
 193 │         
 194 │         const marker = new mapboxgl.Marker(el)
 195 │           .setLngLat([mall.longitude, mall.latitude])
 196 │           .setPopup(popup)
 197 │           .addTo(map.current!);
 198 │ 
 199 │         markersRef.current.push(marker);
 200 │       } catch (error) {
 201 │         console.error('Error adding marker for mall:', mall.name, error);
 202 │       }
 203 │     });
 204 │   }, [malls, mapReady]);
 205 │ 
 206 │   if (mapError) {
 207 │     return (
 208 │       <div className={`relative w-full h-[400px] rounded-lg bg-gray-100 flex flex-col items-center justify-center gap-4 ${className}`}>
 209 │         <AlertCircle className="h-12 w-12 text-gray-400" />
 210 │         <div className="text-center">
 211 │           <p className="text-gray-600 mb-2">{mapError}</p>
 212 │           <Button 
 213 │             variant="outline" 
 214 │             onClick={() => window.location.reload()}
 215 │             className="inline-flex items-center gap-2"
 216 │           >
 217 │             <MapPin className="h-4 w-4" />
 218 │             <span>Reintentar cargar mapa</span>
 219 │           </Button>
 220 │         </div>
 221 │       </div>
 222 │     );
 223 │   }
 224 │ 
 225 │   return (
 226 │     <div ref={mapContainer} className={`relative w-full h-[400px] rounded-lg shadow-lg bg-white z-10 ${className}`} />
 227 │   );
 228 │ };
 229 │ import { useRef, useEffect, useState } from 'react';
     ·          ───┬──
     ·             ╰── `useRef` redefined here
 230 │ import { UserLocation } from '@/hooks/use-location';
 231 │ import { MapPin, AlertTriangle } from 'lucide-react';
     ╰────
  × the name `useEffect` is defined multiple times
     ╭─[/home/runner/workspace/src/components/maps/LocationMap.tsx:2:1]
   1 │ 
   2 │ import { useEffect, useRef, useState } from 'react';
     ·          ────┬────
     ·              ╰── previous definition of `useEffect` here
   3 │ import mapboxgl from 'mapbox-gl';
   4 │ import 'mapbox-gl/dist/mapbox-gl.css';
   5 │ import { Store } from '@/types/store';
   6 │ import { useQuery } from '@tanstack/react-query';
   7 │ import { supabase } from '@/integrations/supabase/client';
   8 │ import { Button } from "@/components/ui/button";
   9 │ import { toast } from "sonner";
  10 │ import { AlertCircle, MapPin } from "lucide-react";
  11 │ 
  12 │ interface LocationMapProps {
  13 │   userLocation: { lat: number; lng: number } | null;
  14 │   className?: string;
  15 │ }
  16 │ 
  17 │ // Validate and set Mapbox token
  18 │ const MAPBOX_TOKEN = 'pk.eyJ1IjoiYWdsejE0IiwiYSI6ImNtN24wMTV2cjByMncybHBycHAwMGQ3aG4ifQ.R5Qpb4QfKpXvuRLNt1yf-g';
  19 │ 
  20 │ const isValidMapboxToken = (token: string): boolean => {
  21 │   return token.startsWith('pk.') && token.length > 50;
  22 │ };
  23 │ 
  24 │ if (!isValidMapboxToken(MAPBOX_TOKEN)) {
  25 │   console.error('Invalid Mapbox token format');
  26 │ } else {
  27 │   mapboxgl.accessToken = MAPBOX_TOKEN;
  28 │ }
  29 │ 
  30 │ export const LocationMap = ({ userLocation, className = "" }: LocationMapProps) => {
  31 │   const mapContainer = useRef<HTMLDivElement>(null);
  32 │   const map = useRef<mapboxgl.Map | null>(null);
  33 │   const markersRef = useRef<mapboxgl.Marker[]>([]);
  34 │   const [mapReady, setMapReady] = useState(false);
  35 │   const [mapError, setMapError] = useState<string | null>(null);
  36 │ 
  37 │   const { data: malls } = useQuery({
  38 │     queryKey: ['shopping-malls-map'],
  39 │     queryFn: async () => {
  40 │       const { data, error } = await supabase
  41 │         .from('shopping_malls')
  42 │         .select('*, stores(*)');
  43 │       if (error) throw error;
  44 │       return data;
  45 │     }
  46 │   });
  47 │ 
  48 │   useEffect(() => {
  49 │     if (!mapContainer.current || map.current) return;
  50 │ 
  51 │     if (!isValidMapboxToken(MAPBOX_TOKEN)) {
  52 │       const error = 'Error: Invalid map configuration';
  53 │       console.error(error);
  54 │       setMapError(error);
  55 │       toast.error(error);
  56 │       return;
  57 │     }
  58 │ 
  59 │     try {
  60 │       const defaultCenter = [-99.1332, 19.4326]; // Mexico City
  61 │       const initialCenter = userLocation ? [userLocation.lng, userLocation.lat] : defaultCenter;
  62 │       const initialZoom = userLocation ? 12 : 5;
  63 │ 
  64 │       // Initialize map
  65 │       map.current = new mapboxgl.Map({
  66 │         container: mapContainer.current!,
  67 │         style: 'mapbox://styles/mapbox/streets-v12',
  68 │         center: initialCenter,
  69 │         zoom: initialZoom,
  70 │         attributionControl: false
  71 │       });
  72 │ 
  73 │       // Add navigation controls
  74 │       map.current.addControl(new mapboxgl.NavigationControl(), 'top-right');
  75 │ 
  76 │       // Add user location control
  77 │       map.current.addControl(new mapboxgl.GeolocateControl({
  78 │         positionOptions: {
  79 │           enableHighAccuracy: true
  80 │         },
  81 │         trackUserLocation: true,
  82 │         showUserHeading: true
  83 │       }));
  84 │ 
  85 │       // Add attribution control
  86 │       map.current.addControl(new mapboxgl.AttributionControl(), 'bottom-right');
  87 │ 
  88 │       // Wait for map to load before doing anything else
  89 │       map.current.on('load', () => {
  90 │         console.log('Map loaded successfully');
  91 │         setMapReady(true);
  92 │       });
  93 │ 
  94 │       // Handle any errors
  95 │       map.current.on('error', (e) => {
  96 │         console.error('Map error:', e);
  97 │         setMapError('Error loading map components');
  98 │         toast.error('Error loading map components');
  99 │       });
 100 │     } catch (error) {
 101 │       console.error('Error initializing map:', error);
 102 │       setMapError('Error initializing map interface');
 103 │       toast.error('Error initializing map interface');
 104 │     }
 105 │ 
 106 │     return () => {
 107 │       if (map.current) {
 108 │         map.current.remove();
 109 │         map.current = null;
 110 │         setMapReady(false);
 111 │       }
 112 │     };
 113 │   }, [userLocation]);
 114 │ 
 115 │   // Update markers when map is ready and malls data changes
 116 │   useEffect(() => {
 117 │     if (!mapReady || !map.current || !malls) return;
 118 │ 
 119 │     console.log('Adding markers for', malls.length, 'malls');
 120 │     
 121 │     // Clear existing markers
 122 │     markersRef.current.forEach(marker => marker.remove());
 123 │     markersRef.current = [];
 124 │ 
 125 │     malls.forEach(mall => {
 126 │       if (!mall.longitude || !mall.latitude) {
 127 │         console.warn('Mall missing coordinates:', mall.name);
 128 │         return;
 129 │       }
 130 │ 
 131 │       const storeCount = mall.stores?.length || 0;
 132 │       
 133 │       // Create custom marker element
 134 │       const el = document.createElement('div');
 135 │       el.className = 'relative';
 136 │       el.innerHTML = `
 137 │         <div class="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white font-bold shadow-lg cursor-pointer hover:bg-purple-700 transition-colors">
 138 │           ${storeCount}
 139 │         </div>
 140 │       `;
 141 │ 
 142 │       // Create popup with clickable link and rich details
 143 │       const popup = new mapboxgl.Popup({ 
 144 │         offset: 25, 
 145 │         maxWidth: '300px',
 146 │         className: 'mall-popup-container' // Custom class for styling
 147 │       })
 148 │         .setHTML(`
 149 │           <div class="p-3 border-b border-purple-100">
 150 │             <h3 class="font-bold text-gray-900 text-lg mb-1">${mall.name}</h3>
 151 │             <div class="flex items-start gap-2 mb-2">
 152 │               <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-500 mt-0.5 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>
 153 │               <p class="text-sm text-gray-600">${mall.address}</p>
 154 │             </div>
 155 │             <div class="flex items-center gap-2">
 156 │               <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-500 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="16" height="16" x="4" y="4" rx="2"/><path d="M9 9h.01M15 9h.01M9 15h.01M15 15h.01M9 9h.01"/></svg>
 157 │               <p class="text-sm text-purple-600 font-medium">${storeCount} tiendas</p>
 158 │             </div>
 159 │             ${mall.description ? `<p class="text-sm text-gray-500 mt-2 italic line-clamp-2">${mall.description}</p>` : ''}
 160 │           </div>
 161 │           <div class="p-3">
 162 │             <a href="/mall/${mall.id}" class="block w-full py-2 px-3 bg-purple-600 hover:bg-purple-700 text-white text-center rounded-md font-medium text-sm transition-colors">Ver perfil completo</a>
 163 │           </div>
 164 │         `);
 165 │ 
 166 │       // Add marker to map
 167 │       try {
 168 │         // Make the marker element clickable with improved interaction
 169 │         el.style.cursor = 'pointer';
 170 │         el.onclick = (e) => {
 171 │           // First show popup when clicking on marker
 172 │           marker.togglePopup();
 173 │           
 174 │           // Fly to the marker position with slight offset for popup visibility
 175 │           if (map.current) {
 176 │             // Get popup height to calculate proper offset
 177 │             const popupHeight = document.querySelector('.mapboxgl-popup-content')?.clientHeight || 200;
 178 │             
 179 │             // Center on marker with vertical offset to ensure popup is visible
 180 │             map.current.flyTo({
 181 │               center: [mall.longitude, mall.latitude],
 182 │               offset: [0, -popupHeight/2],
 183 │               zoom: Math.max(map.current.getZoom(), 13), // Ensure we're zoomed in enough
 184 │               duration: 800,
 185 │               essential: true
 186 │             });
 187 │           }
 188 │           
 189 │           // Prevent immediate navigation to allow users to read popup details
 190 │           e.stopPropagation();
 191 │           e.preventDefault();
 192 │         };
 193 │         
 194 │         const marker = new mapboxgl.Marker(el)
 195 │           .setLngLat([mall.longitude, mall.latitude])
 196 │           .setPopup(popup)
 197 │           .addTo(map.current!);
 198 │ 
 199 │         markersRef.current.push(marker);
 200 │       } catch (error) {
 201 │         console.error('Error adding marker for mall:', mall.name, error);
 202 │       }
 203 │     });
 204 │   }, [malls, mapReady]);
 205 │ 
 206 │   if (mapError) {
 207 │     return (
 208 │       <div className={`relative w-full h-[400px] rounded-lg bg-gray-100 flex flex-col items-center justify-center gap-4 ${className}`}>
 209 │         <AlertCircle className="h-12 w-12 text-gray-400" />
 210 │         <div className="text-center">
 211 │           <p className="text-gray-600 mb-2">{mapError}</p>
 212 │           <Button 
 213 │             variant="outline" 
 214 │             onClick={() => window.location.reload()}
 215 │             className="inline-flex items-center gap-2"
 216 │           >
 217 │             <MapPin className="h-4 w-4" />
 218 │             <span>Reintentar cargar mapa</span>
 219 │           </Button>
 220 │         </div>
 221 │       </div>
 222 │     );
 223 │   }
 224 │ 
 225 │   return (
 226 │     <div ref={mapContainer} className={`relative w-full h-[400px] rounded-lg shadow-lg bg-white z-10 ${className}`} />
 227 │   );
 228 │ };
 229 │ import { useRef, useEffect, useState } from 'react';
     ·                  ────┬────
     ·                      ╰── `useEffect` redefined here
 230 │ import { UserLocation } from '@/hooks/use-location';
 231 │ import { MapPin, AlertTriangle } from 'lucide-react';
     ╰────
  × the name `useState` is defined multiple times
     ╭─[/home/runner/workspace/src/components/maps/LocationMap.tsx:2:1]
   1 │ 
   2 │ import { useEffect, useRef, useState } from 'react';
     ·                             ────┬───
     ·                                 ╰── previous definition of `useState` here
   3 │ import mapboxgl from 'mapbox-gl';
   4 │ import 'mapbox-gl/dist/mapbox-gl.css';
   5 │ import { Store } from '@/types/store';
   6 │ import { useQuery } from '@tanstack/react-query';
   7 │ import { supabase } from '@/integrations/supabase/client';
   8 │ import { Button } from "@/components/ui/button";
   9 │ import { toast } from "sonner";
  10 │ import { AlertCircle, MapPin } from "lucide-react";
  11 │ 
  12 │ interface LocationMapProps {
  13 │   userLocation: { lat: number; lng: number } | null;
  14 │   className?: string;
  15 │ }
  16 │ 
  17 │ // Validate and set Mapbox token
  18 │ const MAPBOX_TOKEN = 'pk.eyJ1IjoiYWdsejE0IiwiYSI6ImNtN24wMTV2cjByMncybHBycHAwMGQ3aG4ifQ.R5Qpb4QfKpXvuRLNt1yf-g';
  19 │ 
  20 │ const isValidMapboxToken = (token: string): boolean => {
  21 │   return token.startsWith('pk.') && token.length > 50;
  22 │ };
  23 │ 
  24 │ if (!isValidMapboxToken(MAPBOX_TOKEN)) {
  25 │   console.error('Invalid Mapbox token format');
  26 │ } else {
  27 │   mapboxgl.accessToken = MAPBOX_TOKEN;
  28 │ }
  29 │ 
  30 │ export const LocationMap = ({ userLocation, className = "" }: LocationMapProps) => {
  31 │   const mapContainer = useRef<HTMLDivElement>(null);
  32 │   const map = useRef<mapboxgl.Map | null>(null);
  33 │   const markersRef = useRef<mapboxgl.Marker[]>([]);
  34 │   const [mapReady, setMapReady] = useState(false);
  35 │   const [mapError, setMapError] = useState<string | null>(null);
  36 │ 
  37 │   const { data: malls } = useQuery({
  38 │     queryKey: ['shopping-malls-map'],
  39 │     queryFn: async () => {
  40 │       const { data, error } = await supabase
  41 │         .from('shopping_malls')
  42 │         .select('*, stores(*)');
  43 │       if (error) throw error;
  44 │       return data;
  45 │     }
  46 │   });
  47 │ 
  48 │   useEffect(() => {
  49 │     if (!mapContainer.current || map.current) return;
  50 │ 
  51 │     if (!isValidMapboxToken(MAPBOX_TOKEN)) {
  52 │       const error = 'Error: Invalid map configuration';
  53 │       console.error(error);
  54 │       setMapError(error);
  55 │       toast.error(error);
  56 │       return;
  57 │     }
  58 │ 
  59 │     try {
  60 │       const defaultCenter = [-99.1332, 19.4326]; // Mexico City
  61 │       const initialCenter = userLocation ? [userLocation.lng, userLocation.lat] : defaultCenter;
  62 │       const initialZoom = userLocation ? 12 : 5;
  63 │ 
  64 │       // Initialize map
  65 │       map.current = new mapboxgl.Map({
  66 │         container: mapContainer.current!,
  67 │         style: 'mapbox://styles/mapbox/streets-v12',
  68 │         center: initialCenter,
  69 │         zoom: initialZoom,
  70 │         attributionControl: false
  71 │       });
  72 │ 
  73 │       // Add navigation controls
  74 │       map.current.addControl(new mapboxgl.NavigationControl(), 'top-right');
  75 │ 
  76 │       // Add user location control
  77 │       map.current.addControl(new mapboxgl.GeolocateControl({
  78 │         positionOptions: {
  79 │           enableHighAccuracy: true
  80 │         },
  81 │         trackUserLocation: true,
  82 │         showUserHeading: true
  83 │       }));
  84 │ 
  85 │       // Add attribution control
  86 │       map.current.addControl(new mapboxgl.AttributionControl(), 'bottom-right');
  87 │ 
  88 │       // Wait for map to load before doing anything else
  89 │       map.current.on('load', () => {
  90 │         console.log('Map loaded successfully');
  91 │         setMapReady(true);
  92 │       });
  93 │ 
  94 │       // Handle any errors
  95 │       map.current.on('error', (e) => {
  96 │         console.error('Map error:', e);
  97 │         setMapError('Error loading map components');
  98 │         toast.error('Error loading map components');
  99 │       });
 100 │     } catch (error) {
 101 │       console.error('Error initializing map:', error);
 102 │       setMapError('Error initializing map interface');
 103 │       toast.error('Error initializing map interface');
 104 │     }
 105 │ 
 106 │     return () => {
 107 │       if (map.current) {
 108 │         map.current.remove();
 109 │         map.current = null;
 110 │         setMapReady(false);
 111 │       }
 112 │     };
 113 │   }, [userLocation]);
 114 │ 
 115 │   // Update markers when map is ready and malls data changes
 116 │   useEffect(() => {
 117 │     if (!mapReady || !map.current || !malls) return;
 118 │ 
 119 │     console.log('Adding markers for', malls.length, 'malls');
 120 │     
 121 │     // Clear existing markers
 122 │     markersRef.current.forEach(marker => marker.remove());
 123 │     markersRef.current = [];
 124 │ 
 125 │     malls.forEach(mall => {
 126 │       if (!mall.longitude || !mall.latitude) {
 127 │         console.warn('Mall missing coordinates:', mall.name);
 128 │         return;
 129 │       }
 130 │ 
 131 │       const storeCount = mall.stores?.length || 0;
 132 │       
 133 │       // Create custom marker element
 134 │       const el = document.createElement('div');
 135 │       el.className = 'relative';
 136 │       el.innerHTML = `
 137 │         <div class="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white font-bold shadow-lg cursor-pointer hover:bg-purple-700 transition-colors">
 138 │           ${storeCount}
 139 │         </div>
 140 │       `;
 141 │ 
 142 │       // Create popup with clickable link and rich details
 143 │       const popup = new mapboxgl.Popup({ 
 144 │         offset: 25, 
 145 │         maxWidth: '300px',
 146 │         className: 'mall-popup-container' // Custom class for styling
 147 │       })
 148 │         .setHTML(`
 149 │           <div class="p-3 border-b border-purple-100">
 150 │             <h3 class="font-bold text-gray-900 text-lg mb-1">${mall.name}</h3>
 151 │             <div class="flex items-start gap-2 mb-2">
 152 │               <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-500 mt-0.5 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>
 153 │               <p class="text-sm text-gray-600">${mall.address}</p>
 154 │             </div>
 155 │             <div class="flex items-center gap-2">
 156 │               <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-500 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="16" height="16" x="4" y="4" rx="2"/><path d="M9 9h.01M15 9h.01M9 15h.01M15 15h.01M9 9h.01"/></svg>
 157 │               <p class="text-sm text-purple-600 font-medium">${storeCount} tiendas</p>
 158 │             </div>
 159 │             ${mall.description ? `<p class="text-sm text-gray-500 mt-2 italic line-clamp-2">${mall.description}</p>` : ''}
 160 │           </div>
 161 │           <div class="p-3">
 162 │             <a href="/mall/${mall.id}" class="block w-full py-2 px-3 bg-purple-600 hover:bg-purple-700 text-white text-center rounded-md font-medium text-sm transition-colors">Ver perfil completo</a>
 163 │           </div>
 164 │         `);
 165 │ 
 166 │       // Add marker to map
 167 │       try {
 168 │         // Make the marker element clickable with improved interaction
 169 │         el.style.cursor = 'pointer';
 170 │         el.onclick = (e) => {
 171 │           // First show popup when clicking on marker
 172 │           marker.togglePopup();
 173 │           
 174 │           // Fly to the marker position with slight offset for popup visibility
 175 │           if (map.current) {
 176 │             // Get popup height to calculate proper offset
 177 │             const popupHeight = document.querySelector('.mapboxgl-popup-content')?.clientHeight || 200;
 178 │             
 179 │             // Center on marker with vertical offset to ensure popup is visible
 180 │             map.current.flyTo({
 181 │               center: [mall.longitude, mall.latitude],
 182 │               offset: [0, -popupHeight/2],
 183 │               zoom: Math.max(map.current.getZoom(), 13), // Ensure we're zoomed in enough
 184 │               duration: 800,
 185 │               essential: true
 186 │             });
 187 │           }
 188 │           
 189 │           // Prevent immediate navigation to allow users to read popup details
 190 │           e.stopPropagation();
 191 │           e.preventDefault();
 192 │         };
 193 │         
 194 │         const marker = new mapboxgl.Marker(el)
 195 │           .setLngLat([mall.longitude, mall.latitude])
 196 │           .setPopup(popup)
 197 │           .addTo(map.current!);
 198 │ 
 199 │         markersRef.current.push(marker);
 200 │       } catch (error) {
 201 │         console.error('Error adding marker for mall:', mall.name, error);
 202 │       }
 203 │     });
 204 │   }, [malls, mapReady]);
 205 │ 
 206 │   if (mapError) {
 207 │     return (
 208 │       <div className={`relative w-full h-[400px] rounded-lg bg-gray-100 flex flex-col items-center justify-center gap-4 ${className}`}>
 209 │         <AlertCircle className="h-12 w-12 text-gray-400" />
 210 │         <div className="text-center">
 211 │           <p className="text-gray-600 mb-2">{mapError}</p>
 212 │           <Button 
 213 │             variant="outline" 
 214 │             onClick={() => window.location.reload()}
 215 │             className="inline-flex items-center gap-2"
 216 │           >
 217 │             <MapPin className="h-4 w-4" />
 218 │             <span>Reintentar cargar mapa</span>
 219 │           </Button>
 220 │         </div>
 221 │       </div>
 222 │     );
 223 │   }
 224 │ 
 225 │   return (
 226 │     <div ref={mapContainer} className={`relative w-full h-[400px] rounded-lg shadow-lg bg-white z-10 ${className}`} />
 227 │   );
 228 │ };
 229 │ import { useRef, useEffect, useState } from 'react';
     ·                             ────┬───
     ·                                 ╰── `useState` redefined here
 230 │ import { UserLocation } from '@/hooks/use-location';
 231 │ import { MapPin, AlertTriangle } from 'lucide-react';
     ╰────
  × the name `MapPin` is defined multiple times
     ╭─[/home/runner/workspace/src/components/maps/LocationMap.tsx:10:1]
   7 │ import { supabase } from '@/integrations/supabase/client';
   8 │ import { Button } from "@/components/ui/button";
   9 │ import { toast } from "sonner";
  10 │ import { AlertCircle, MapPin } from "lucide-react";
     ·                       ───┬──
     ·                          ╰── previous definition of `MapPin` here
  11 │ 
  12 │ interface LocationMapProps {
  13 │   userLocation: { lat: number; lng: number } | null;
  14 │   className?: string;
  15 │ }
  16 │ 
  17 │ // Validate and set Mapbox token
  18 │ const MAPBOX_TOKEN = 'pk.eyJ1IjoiYWdsejE0IiwiYSI6ImNtN24wMTV2cjByMncybHBycHAwMGQ3aG4ifQ.R5Qpb4QfKpXvuRLNt1yf-g';
  19 │ 
  20 │ const isValidMapboxToken = (token: string): boolean => {
  21 │   return token.startsWith('pk.') && token.length > 50;
  22 │ };
  23 │ 
  24 │ if (!isValidMapboxToken(MAPBOX_TOKEN)) {
  25 │   console.error('Invalid Mapbox token format');
  26 │ } else {
  27 │   mapboxgl.accessToken = MAPBOX_TOKEN;
  28 │ }
  29 │ 
  30 │ export const LocationMap = ({ userLocation, className = "" }: LocationMapProps) => {
  31 │   const mapContainer = useRef<HTMLDivElement>(null);
  32 │   const map = useRef<mapboxgl.Map | null>(null);
  33 │   const markersRef = useRef<mapboxgl.Marker[]>([]);
  34 │   const [mapReady, setMapReady] = useState(false);
  35 │   const [mapError, setMapError] = useState<string | null>(null);
  36 │ 
  37 │   const { data: malls } = useQuery({
  38 │     queryKey: ['shopping-malls-map'],
  39 │     queryFn: async () => {
  40 │       const { data, error } = await supabase
  41 │         .from('shopping_malls')
  42 │         .select('*, stores(*)');
  43 │       if (error) throw error;
  44 │       return data;
  45 │     }
  46 │   });
  47 │ 
  48 │   useEffect(() => {
  49 │     if (!mapContainer.current || map.current) return;
  50 │ 
  51 │     if (!isValidMapboxToken(MAPBOX_TOKEN)) {
  52 │       const error = 'Error: Invalid map configuration';
  53 │       console.error(error);
  54 │       setMapError(error);
  55 │       toast.error(error);
  56 │       return;
  57 │     }
  58 │ 
  59 │     try {
  60 │       const defaultCenter = [-99.1332, 19.4326]; // Mexico City
  61 │       const initialCenter = userLocation ? [userLocation.lng, userLocation.lat] : defaultCenter;
  62 │       const initialZoom = userLocation ? 12 : 5;
  63 │ 
  64 │       // Initialize map
  65 │       map.current = new mapboxgl.Map({
  66 │         container: mapContainer.current!,
  67 │         style: 'mapbox://styles/mapbox/streets-v12',
  68 │         center: initialCenter,
  69 │         zoom: initialZoom,
  70 │         attributionControl: false
  71 │       });
  72 │ 
  73 │       // Add navigation controls
  74 │       map.current.addControl(new mapboxgl.NavigationControl(), 'top-right');
  75 │ 
  76 │       // Add user location control
  77 │       map.current.addControl(new mapboxgl.GeolocateControl({
  78 │         positionOptions: {
  79 │           enableHighAccuracy: true
  80 │         },
  81 │         trackUserLocation: true,
  82 │         showUserHeading: true
  83 │       }));
  84 │ 
  85 │       // Add attribution control
  86 │       map.current.addControl(new mapboxgl.AttributionControl(), 'bottom-right');
  87 │ 
  88 │       // Wait for map to load before doing anything else
  89 │       map.current.on('load', () => {
  90 │         console.log('Map loaded successfully');
  91 │         setMapReady(true);
  92 │       });
  93 │ 
  94 │       // Handle any errors
  95 │       map.current.on('error', (e) => {
  96 │         console.error('Map error:', e);
  97 │         setMapError('Error loading map components');
  98 │         toast.error('Error loading map components');
  99 │       });
 100 │     } catch (error) {
 101 │       console.error('Error initializing map:', error);
 102 │       setMapError('Error initializing map interface');
 103 │       toast.error('Error initializing map interface');
 104 │     }
 105 │ 
 106 │     return () => {
 107 │       if (map.current) {
 108 │         map.current.remove();
 109 │         map.current = null;
 110 │         setMapReady(false);
 111 │       }
 112 │     };
 113 │   }, [userLocation]);
 114 │ 
 115 │   // Update markers when map is ready and malls data changes
 116 │   useEffect(() => {
 117 │     if (!mapReady || !map.current || !malls) return;
 118 │ 
 119 │     console.log('Adding markers for', malls.length, 'malls');
 120 │     
 121 │     // Clear existing markers
 122 │     markersRef.current.forEach(marker => marker.remove());
 123 │     markersRef.current = [];
 124 │ 
 125 │     malls.forEach(mall => {
 126 │       if (!mall.longitude || !mall.latitude) {
 127 │         console.warn('Mall missing coordinates:', mall.name);
 128 │         return;
 129 │       }
 130 │ 
 131 │       const storeCount = mall.stores?.length || 0;
 132 │       
 133 │       // Create custom marker element
 134 │       const el = document.createElement('div');
 135 │       el.className = 'relative';
 136 │       el.innerHTML = `
 137 │         <div class="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white font-bold shadow-lg cursor-pointer hover:bg-purple-700 transition-colors">
 138 │           ${storeCount}
 139 │         </div>
 140 │       `;
 141 │ 
 142 │       // Create popup with clickable link and rich details
 143 │       const popup = new mapboxgl.Popup({ 
 144 │         offset: 25, 
 145 │         maxWidth: '300px',
 146 │         className: 'mall-popup-container' // Custom class for styling
 147 │       })
 148 │         .setHTML(`
 149 │           <div class="p-3 border-b border-purple-100">
 150 │             <h3 class="font-bold text-gray-900 text-lg mb-1">${mall.name}</h3>
 151 │             <div class="flex items-start gap-2 mb-2">
 152 │               <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-500 mt-0.5 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>
 153 │               <p class="text-sm text-gray-600">${mall.address}</p>
 154 │             </div>
 155 │             <div class="flex items-center gap-2">
 156 │               <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-500 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="16" height="16" x="4" y="4" rx="2"/><path d="M9 9h.01M15 9h.01M9 15h.01M15 15h.01M9 9h.01"/></svg>
 157 │               <p class="text-sm text-purple-600 font-medium">${storeCount} tiendas</p>
 158 │             </div>
 159 │             ${mall.description ? `<p class="text-sm text-gray-500 mt-2 italic line-clamp-2">${mall.description}</p>` : ''}
 160 │           </div>
 161 │           <div class="p-3">
 162 │             <a href="/mall/${mall.id}" class="block w-full py-2 px-3 bg-purple-600 hover:bg-purple-700 text-white text-center rounded-md font-medium text-sm transition-colors">Ver perfil completo</a>
 163 │           </div>
 164 │         `);
 165 │ 
 166 │       // Add marker to map
 167 │       try {
 168 │         // Make the marker element clickable with improved interaction
 169 │         el.style.cursor = 'pointer';
 170 │         el.onclick = (e) => {
 171 │           // First show popup when clicking on marker
 172 │           marker.togglePopup();
 173 │           
 174 │           // Fly to the marker position with slight offset for popup visibility
 175 │           if (map.current) {
 176 │             // Get popup height to calculate proper offset
 177 │             const popupHeight = document.querySelector('.mapboxgl-popup-content')?.clientHeight || 200;
 178 │             
 179 │             // Center on marker with vertical offset to ensure popup is visible
 180 │             map.current.flyTo({
 181 │               center: [mall.longitude, mall.latitude],
 182 │               offset: [0, -popupHeight/2],
 183 │               zoom: Math.max(map.current.getZoom(), 13), // Ensure we're zoomed in enough
 184 │               duration: 800,
 185 │               essential: true
 186 │             });
 187 │           }
 188 │           
 189 │           // Prevent immediate navigation to allow users to read popup details
 190 │           e.stopPropagation();
 191 │           e.preventDefault();
 192 │         };
 193 │         
 194 │         const marker = new mapboxgl.Marker(el)
 195 │           .setLngLat([mall.longitude, mall.latitude])
 196 │           .setPopup(popup)
 197 │           .addTo(map.current!);
 198 │ 
 199 │         markersRef.current.push(marker);
 200 │       } catch (error) {
 201 │         console.error('Error adding marker for mall:', mall.name, error);
 202 │       }
 203 │     });
 204 │   }, [malls, mapReady]);
 205 │ 
 206 │   if (mapError) {
 207 │     return (
 208 │       <div className={`relative w-full h-[400px] rounded-lg bg-gray-100 flex flex-col items-center justify-center gap-4 ${className}`}>
 209 │         <AlertCircle className="h-12 w-12 text-gray-400" />
 210 │         <div className="text-center">
 211 │           <p className="text-gray-600 mb-2">{mapError}</p>
 212 │           <Button 
 213 │             variant="outline" 
 214 │             onClick={() => window.location.reload()}
 215 │             className="inline-flex items-center gap-2"
 216 │           >
 217 │             <MapPin className="h-4 w-4" />
 218 │             <span>Reintentar cargar mapa</span>
 219 │           </Button>
 220 │         </div>
 221 │       </div>
 222 │     );
 223 │   }
 224 │ 
 225 │   return (
 226 │     <div ref={mapContainer} className={`relative w-full h-[400px] rounded-lg shadow-lg bg-white z-10 ${className}`} />
 227 │   );
 228 │ };
 229 │ import { useRef, useEffect, useState } from 'react';
 230 │ import { UserLocation } from '@/hooks/use-location';
 231 │ import { MapPin, AlertTriangle } from 'lucide-react';
     ·          ───┬──
     ·             ╰── `MapPin` redefined here
 232 │ 
 233 │ interface LocationMapProps {
 234 │   userLocation: UserLocation | null;
     ╰────
  × the name `LocationMap` is defined multiple times
     ╭─[/home/runner/workspace/src/components/maps/LocationMap.tsx:30:1]
  27 │   mapboxgl.accessToken = MAPBOX_TOKEN;
  28 │ }
  29 │ 
  30 │ export const LocationMap = ({ userLocation, className = "" }: LocationMapProps) => {
     ·              ─────┬─────
     ·                   ╰── previous definition of `LocationMap` here
  31 │   const mapContainer = useRef<HTMLDivElement>(null);
  32 │   const map = useRef<mapboxgl.Map | null>(null);
  33 │   const markersRef = useRef<mapboxgl.Marker[]>([]);
  34 │   const [mapReady, setMapReady] = useState(false);
  35 │   const [mapError, setMapError] = useState<string | null>(null);
  36 │ 
  37 │   const { data: malls } = useQuery({
  38 │     queryKey: ['shopping-malls-map'],
  39 │     queryFn: async () => {
  40 │       const { data, error } = await supabase
  41 │         .from('shopping_malls')
  42 │         .select('*, stores(*)');
  43 │       if (error) throw error;
  44 │       return data;
  45 │     }
  46 │   });
  47 │ 
  48 │   useEffect(() => {
  49 │     if (!mapContainer.current || map.current) return;
  50 │ 
  51 │     if (!isValidMapboxToken(MAPBOX_TOKEN)) {
  52 │       const error = 'Error: Invalid map configuration';
  53 │       console.error(error);
  54 │       setMapError(error);
  55 │       toast.error(error);
  56 │       return;
  57 │     }
  58 │ 
  59 │     try {
  60 │       const defaultCenter = [-99.1332, 19.4326]; // Mexico City
  61 │       const initialCenter = userLocation ? [userLocation.lng, userLocation.lat] : defaultCenter;
  62 │       const initialZoom = userLocation ? 12 : 5;
  63 │ 
  64 │       // Initialize map
  65 │       map.current = new mapboxgl.Map({
  66 │         container: mapContainer.current!,
  67 │         style: 'mapbox://styles/mapbox/streets-v12',
  68 │         center: initialCenter,
  69 │         zoom: initialZoom,
  70 │         attributionControl: false
  71 │       });
  72 │ 
  73 │       // Add navigation controls
  74 │       map.current.addControl(new mapboxgl.NavigationControl(), 'top-right');
  75 │ 
  76 │       // Add user location control
  77 │       map.current.addControl(new mapboxgl.GeolocateControl({
  78 │         positionOptions: {
  79 │           enableHighAccuracy: true
  80 │         },
  81 │         trackUserLocation: true,
  82 │         showUserHeading: true
  83 │       }));
  84 │ 
  85 │       // Add attribution control
  86 │       map.current.addControl(new mapboxgl.AttributionControl(), 'bottom-right');
  87 │ 
  88 │       // Wait for map to load before doing anything else
  89 │       map.current.on('load', () => {
  90 │         console.log('Map loaded successfully');
  91 │         setMapReady(true);
  92 │       });
  93 │ 
  94 │       // Handle any errors
  95 │       map.current.on('error', (e) => {
  96 │         console.error('Map error:', e);
  97 │         setMapError('Error loading map components');
  98 │         toast.error('Error loading map components');
  99 │       });
 100 │     } catch (error) {
 101 │       console.error('Error initializing map:', error);
 102 │       setMapError('Error initializing map interface');
 103 │       toast.error('Error initializing map interface');
 104 │     }
 105 │ 
 106 │     return () => {
 107 │       if (map.current) {
 108 │         map.current.remove();
 109 │         map.current = null;
 110 │         setMapReady(false);
 111 │       }
 112 │     };
 113 │   }, [userLocation]);
 114 │ 
 115 │   // Update markers when map is ready and malls data changes
 116 │   useEffect(() => {
 117 │     if (!mapReady || !map.current || !malls) return;
 118 │ 
 119 │     console.log('Adding markers for', malls.length, 'malls');
 120 │     
 121 │     // Clear existing markers
 122 │     markersRef.current.forEach(marker => marker.remove());
 123 │     markersRef.current = [];
 124 │ 
 125 │     malls.forEach(mall => {
 126 │       if (!mall.longitude || !mall.latitude) {
 127 │         console.warn('Mall missing coordinates:', mall.name);
 128 │         return;
 129 │       }
 130 │ 
 131 │       const storeCount = mall.stores?.length || 0;
 132 │       
 133 │       // Create custom marker element
 134 │       const el = document.createElement('div');
 135 │       el.className = 'relative';
 136 │       el.innerHTML = `
 137 │         <div class="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white font-bold shadow-lg cursor-pointer hover:bg-purple-700 transition-colors">
 138 │           ${storeCount}
 139 │         </div>
 140 │       `;
 141 │ 
 142 │       // Create popup with clickable link and rich details
 143 │       const popup = new mapboxgl.Popup({ 
 144 │         offset: 25, 
 145 │         maxWidth: '300px',
 146 │         className: 'mall-popup-container' // Custom class for styling
 147 │       })
 148 │         .setHTML(`
 149 │           <div class="p-3 border-b border-purple-100">
 150 │             <h3 class="font-bold text-gray-900 text-lg mb-1">${mall.name}</h3>
 151 │             <div class="flex items-start gap-2 mb-2">
 152 │               <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-500 mt-0.5 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>
 153 │               <p class="text-sm text-gray-600">${mall.address}</p>
 154 │             </div>
 155 │             <div class="flex items-center gap-2">
 156 │               <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-500 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="16" height="16" x="4" y="4" rx="2"/><path d="M9 9h.01M15 9h.01M9 15h.01M15 15h.01M9 9h.01"/></svg>
 157 │               <p class="text-sm text-purple-600 font-medium">${storeCount} tiendas</p>
 158 │             </div>
 159 │             ${mall.description ? `<p class="text-sm text-gray-500 mt-2 italic line-clamp-2">${mall.description}</p>` : ''}
 160 │           </div>
 161 │           <div class="p-3">
 162 │             <a href="/mall/${mall.id}" class="block w-full py-2 px-3 bg-purple-600 hover:bg-purple-700 text-white text-center rounded-md font-medium text-sm transition-colors">Ver perfil completo</a>
 163 │           </div>
 164 │         `);
 165 │ 
 166 │       // Add marker to map
 167 │       try {
 168 │         // Make the marker element clickable with improved interaction
 169 │         el.style.cursor = 'pointer';
 170 │         el.onclick = (e) => {
 171 │           // First show popup when clicking on marker
 172 │           marker.togglePopup();
 173 │           
 174 │           // Fly to the marker position with slight offset for popup visibility
 175 │           if (map.current) {
 176 │             // Get popup height to calculate proper offset
 177 │             const popupHeight = document.querySelector('.mapboxgl-popup-content')?.clientHeight || 200;
 178 │             
 179 │             // Center on marker with vertical offset to ensure popup is visible
 180 │             map.current.flyTo({
 181 │               center: [mall.longitude, mall.latitude],
 182 │               offset: [0, -popupHeight/2],
 183 │               zoom: Math.max(map.current.getZoom(), 13), // Ensure we're zoomed in enough
 184 │               duration: 800,
 185 │               essential: true
 186 │             });
 187 │           }
 188 │           
 189 │           // Prevent immediate navigation to allow users to read popup details
 190 │           e.stopPropagation();
 191 │           e.preventDefault();
 192 │         };
 193 │         
 194 │         const marker = new mapboxgl.Marker(el)
 195 │           .setLngLat([mall.longitude, mall.latitude])
 196 │           .setPopup(popup)
 197 │           .addTo(map.current!);
 198 │ 
 199 │         markersRef.current.push(marker);
 200 │       } catch (error) {
 201 │         console.error('Error adding marker for mall:', mall.name, error);
 202 │       }
 203 │     });
 204 │   }, [malls, mapReady]);
 205 │ 
 206 │   if (mapError) {
 207 │     return (
 208 │       <div className={`relative w-full h-[400px] rounded-lg bg-gray-100 flex flex-col items-center justify-center gap-4 ${className}`}>
 209 │         <AlertCircle className="h-12 w-12 text-gray-400" />
 210 │         <div className="text-center">
 211 │           <p className="text-gray-600 mb-2">{mapError}</p>
 212 │           <Button 
 213 │             variant="outline" 
 214 │             onClick={() => window.location.reload()}
 215 │             className="inline-flex items-center gap-2"
 216 │           >
 217 │             <MapPin className="h-4 w-4" />
 218 │             <span>Reintentar cargar mapa</span>
 219 │           </Button>
 220 │         </div>
 221 │       </div>
 222 │     );
 223 │   }
 224 │ 
 225 │   return (
 226 │     <div ref={mapContainer} className={`relative w-full h-[400px] rounded-lg shadow-lg bg-white z-10 ${className}`} />
 227 │   );
 228 │ };
 229 │ import { useRef, useEffect, useState } from 'react';
 230 │ import { UserLocation } from '@/hooks/use-location';
 231 │ import { MapPin, AlertTriangle } from 'lucide-react';
 232 │ 
 233 │ interface LocationMapProps {
 234 │   userLocation: UserLocation | null;
 235 │   className?: string;
 236 │   mallLocations?: Array<{id: string; latitude: number; longitude: number; name: string}>;
 237 │ }
 238 │ 
 239 │ export const LocationMap = ({ userLocation, className = '', mallLocations = [] }: LocationMapProps) => {
     ·              ─────┬─────
     ·                   ╰── `LocationMap` redefined here
 240 │   const mapRef = useRef<HTMLDivElement>(null);
 241 │   const [mapError, setMapError] = useState<string | null>(null);
 242 │   const [isMapLoaded, setIsMapLoaded] = useState(false);
     ╰────
/home/runner/workspace/src/components/maps/LocationMap.tsx:2:1
1  |  
2  |  import { useEffect, useRef, useState } from 'react';
   |            ^
3  |  import mapboxgl from 'mapbox-gl';
4  |  import 'mapbox-gl/dist/mapbox-gl.css';